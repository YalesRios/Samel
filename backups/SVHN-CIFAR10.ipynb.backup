{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "/users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorboard/compat/tensorflow_stub/dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:\n",
      "The TensorFlow contrib module will not be included in TensorFlow 2.0.\n",
      "For more information, please see:\n",
      "  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n",
      "  * https://github.com/tensorflow/addons\n",
      "  * https://github.com/tensorflow/io (for I/O related ops)\n",
      "If you depend on functionality not listed there, please file an issue.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "import tensorflow_datasets as tfds\n",
    "#from tensorflow import keras\n",
    "import keras\n",
    "import matplotlib.pyplot as plt\n",
    "from vis.visualization import visualize_saliency\n",
    "from vis.visualization import get_num_filters\n",
    "from vis.visualization import visualize_saliency_init\n",
    "from vis.visualization import visualize_saliency_run\n",
    "from vis.utils import utils\n",
    "from tqdm import tqdm\n",
    "from scipy.stats import describe\n",
    "from scipy import ndimage\n",
    "import os\n",
    "import imageio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Loading Data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.enable_eager_execution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Warning: Setting shuffle_files=True because split=TRAIN and shuffle_files=None. This behavior will be deprecated on 2019-08-06, at which point shuffle_files=False will be the default for all splits.\n"
     ]
    }
   ],
   "source": [
    "data = tfds.load(\"svhn_cropped\", split = ['train','test'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.executing_eagerly()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<DatasetV1Adapter shapes: {image: (32, 32, 3), label: ()}, types: {image: tf.uint8, label: tf.int64}>, <DatasetV1Adapter shapes: {image: (32, 32, 3), label: ()}, types: {image: tf.uint8, label: tf.int64}>]\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "train, test = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label: 5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for example in train.take(1):  # Only take a single example\n",
    "  image, label = example[\"image\"], example[\"label\"]\n",
    "\n",
    "  plt.imshow(image.numpy()[:, :, 1].astype(np.float32))\n",
    "  print(\"Label: %d\" % label.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = np.array(list(tfds.as_numpy(train)))\n",
    "test = np.array(list(tfds.as_numpy(test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[7][\"label\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainX = np.array([inst['image'] for inst in train])\n",
    "trainY = np.array([inst['label'] for inst in train])\n",
    "testX = np.array([inst['image'] for inst in test])\n",
    "testY = np.array([inst['label'] for inst in test])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(73257, 32, 32, 3)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.shape(trainX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainY = keras.utils.to_categorical(trainY, 10)\n",
    "testY = keras.utils.to_categorical(testY, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainX = trainX.astype(\"float32\") / 255.0\n",
    "testX = testX.astype(\"float32\") / 255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(73257, 32, 32, 3)\n"
     ]
    }
   ],
   "source": [
    "print(trainX.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DescribeResult(nobs=79970304, minmax=(0.0, 1.0), mean=0.45796666, variance=0.050627448, skewness=0.26756078004837036, kurtosis=-0.6019900844592385)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe(testX,axis=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Code for training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.compat.v1.disable_eager_execution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3976: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Creates Sequential model using Keras\n",
    "#Number of nodes is the same as number of features (different number of nodes were tried but it did not\n",
    "#affect validation accuracy significantly)\n",
    "lenet = keras.Sequential([\n",
    "                            #Input layer:\n",
    "                            keras.layers.Conv2D(20, 5, padding=\"same\", input_shape=[32,32,3], use_bias=True),\n",
    "                            #Hidden Layers:\n",
    "                            keras.layers.Activation(activation=\"relu\"),\n",
    "                            keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)),\n",
    "                            keras.layers.Conv2D(50, 5, padding=\"same\"),\n",
    "                            keras.layers.Activation(activation=\"relu\"),\n",
    "                            keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)),\n",
    "                            keras.layers.Flatten(),\n",
    "                            keras.layers.Dense(500),\n",
    "                            keras.layers.Activation(activation=\"relu\"),\n",
    "                            keras.layers.Dense(10, name='vis',use_bias=True),\n",
    "                            #Output layer\n",
    "                            keras.layers.Activation(activation=\"softmax\"),\n",
    "                        ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#lenets = [keras.models.clone_model(lenet),keras.models.clone_model(lenet),keras.models.clone_model(lenet),keras.models.clone_model(lenet),keras.models.clone_model(lenet),keras.models.clone_model(lenet)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier_number = 5\n",
    "lenets = [keras.models.clone_model(lenet)]\n",
    "for i in range(1,classifier_number):\n",
    "    lenets.append(keras.models.clone_model(lenet))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/optimizers.py:790: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3295: The name tf.log is deprecated. Please use tf.math.log instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/tensorflow/python/ops/math_grad.py:1250: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:986: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /users/ai/u7ysrv/anaconda3/envs/samel/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:986: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 73257 samples, validate on 26032 samples\n",
      "Epoch 1/5\n",
      "73257/73257 [==============================] - 19s 261us/step - loss: 1.7642 - acc: 0.3979 - val_loss: 1.6302 - val_acc: 0.4880\n",
      "Epoch 2/5\n",
      "73257/73257 [==============================] - 16s 213us/step - loss: 0.6505 - acc: 0.8137 - val_loss: 0.6155 - val_acc: 0.8254\n",
      "Epoch 3/5\n",
      "73257/73257 [==============================] - 16s 212us/step - loss: 0.4995 - acc: 0.8597 - val_loss: 0.5069 - val_acc: 0.8604\n",
      "Epoch 4/5\n",
      "73257/73257 [==============================] - 15s 210us/step - loss: 0.4330 - acc: 0.8777 - val_loss: 0.5036 - val_acc: 0.8601\n",
      "Epoch 5/5\n",
      "73257/73257 [==============================] - 15s 211us/step - loss: 0.3859 - acc: 0.8902 - val_loss: 0.4541 - val_acc: 0.8757\n"
     ]
    }
   ],
   "source": [
    "#Compiles sequential model\n",
    "#Using learning rate 0.01\n",
    "#Loss function will be categorical crossentropy\n",
    "lenet.compile(\n",
    "                optimizer=keras.optimizers.SGD(lr=0.01),\n",
    "                loss = 'categorical_crossentropy',\n",
    "                metrics = ['accuracy']\n",
    "                )\n",
    "#Trains network over a number of epochs and evaluates network agains validation data\n",
    "#after each epoch\n",
    "lenetEpochHistory = lenet.fit(trainX, trainY, epochs = 5, validation_data = (testX, testY))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 73257 samples, validate on 26032 samples\n",
      "Epoch 1/5\n",
      "73257/73257 [==============================] - 17s 227us/step - loss: 1.9018 - acc: 0.3414 - val_loss: 1.0731 - val_acc: 0.6744\n",
      "Epoch 2/5\n",
      "73257/73257 [==============================] - 16s 220us/step - loss: 0.7575 - acc: 0.7760 - val_loss: 0.7148 - val_acc: 0.7844\n",
      "Epoch 3/5\n",
      "73257/73257 [==============================] - 16s 219us/step - loss: 0.5472 - acc: 0.8451 - val_loss: 0.6043 - val_acc: 0.8316\n",
      "Epoch 4/5\n",
      "73257/73257 [==============================] - 16s 220us/step - loss: 0.4600 - acc: 0.8699 - val_loss: 0.5174 - val_acc: 0.8570\n",
      "Epoch 5/5\n",
      "73257/73257 [==============================] - 16s 219us/step - loss: 0.4044 - acc: 0.8852 - val_loss: 0.5534 - val_acc: 0.8424\n",
      "Train on 73257 samples, validate on 26032 samples\n",
      "Epoch 1/5\n",
      "73257/73257 [==============================] - 16s 225us/step - loss: 1.8525 - acc: 0.3624 - val_loss: 1.1044 - val_acc: 0.6644\n",
      "Epoch 2/5\n",
      "73257/73257 [==============================] - 16s 217us/step - loss: 0.6785 - acc: 0.8047 - val_loss: 0.6109 - val_acc: 0.8351\n",
      "Epoch 3/5\n",
      "73257/73257 [==============================] - 16s 218us/step - loss: 0.5068 - acc: 0.8588 - val_loss: 0.5691 - val_acc: 0.8397\n",
      "Epoch 4/5\n",
      "73257/73257 [==============================] - 16s 218us/step - loss: 0.4380 - acc: 0.8779 - val_loss: 0.4955 - val_acc: 0.8637\n",
      "Epoch 5/5\n",
      "73257/73257 [==============================] - 16s 218us/step - loss: 0.3893 - acc: 0.8920 - val_loss: 0.4544 - val_acc: 0.8757\n",
      "Train on 73257 samples, validate on 26032 samples\n",
      "Epoch 1/5\n",
      "73257/73257 [==============================] - 16s 224us/step - loss: 1.9384 - acc: 0.3235 - val_loss: 1.3917 - val_acc: 0.5422\n",
      "Epoch 2/5\n",
      "73257/73257 [==============================] - 16s 217us/step - loss: 0.6996 - acc: 0.7982 - val_loss: 0.6310 - val_acc: 0.8281\n",
      "Epoch 3/5\n",
      "73257/73257 [==============================] - 16s 216us/step - loss: 0.5171 - acc: 0.8546 - val_loss: 0.6895 - val_acc: 0.8005\n",
      "Epoch 4/5\n",
      "73257/73257 [==============================] - 16s 216us/step - loss: 0.4430 - acc: 0.8762 - val_loss: 0.4927 - val_acc: 0.8660\n",
      "Epoch 5/5\n",
      "73257/73257 [==============================] - 16s 215us/step - loss: 0.3927 - acc: 0.8898 - val_loss: 0.4660 - val_acc: 0.8742\n",
      "Train on 73257 samples, validate on 26032 samples\n",
      "Epoch 1/5\n",
      "73257/73257 [==============================] - 17s 228us/step - loss: 1.8807 - acc: 0.3507 - val_loss: 0.9539 - val_acc: 0.7246\n",
      "Epoch 2/5\n",
      "73257/73257 [==============================] - 16s 219us/step - loss: 0.7097 - acc: 0.7915 - val_loss: 0.6150 - val_acc: 0.8256\n",
      "Epoch 3/5\n",
      "73257/73257 [==============================] - 16s 219us/step - loss: 0.5213 - acc: 0.8507 - val_loss: 0.6333 - val_acc: 0.8107\n",
      "Epoch 4/5\n",
      "73257/73257 [==============================] - 16s 217us/step - loss: 0.4449 - acc: 0.8730 - val_loss: 0.4896 - val_acc: 0.8607\n",
      "Epoch 5/5\n",
      "73257/73257 [==============================] - 16s 217us/step - loss: 0.3935 - acc: 0.8875 - val_loss: 0.4510 - val_acc: 0.8720\n",
      "Train on 73257 samples, validate on 26032 samples\n",
      "Epoch 1/5\n",
      "73257/73257 [==============================] - 17s 230us/step - loss: 1.9829 - acc: 0.3077 - val_loss: 1.2070 - val_acc: 0.6214\n",
      "Epoch 2/5\n",
      "73257/73257 [==============================] - 16s 221us/step - loss: 0.7072 - acc: 0.7944 - val_loss: 0.6449 - val_acc: 0.8168\n",
      "Epoch 3/5\n",
      "73257/73257 [==============================] - 16s 222us/step - loss: 0.5126 - acc: 0.8567 - val_loss: 0.6289 - val_acc: 0.8233\n",
      "Epoch 4/5\n",
      "73257/73257 [==============================] - 16s 222us/step - loss: 0.4415 - acc: 0.8769 - val_loss: 0.5086 - val_acc: 0.8573\n",
      "Epoch 5/5\n",
      "73257/73257 [==============================] - 16s 222us/step - loss: 0.3922 - acc: 0.8896 - val_loss: 0.4659 - val_acc: 0.8704\n"
     ]
    }
   ],
   "source": [
    "#Compiles sequential model\n",
    "#Using learning rate 0.01\n",
    "#Loss function will be categorical crossentropy\n",
    "for model in lenets:\n",
    "    model.compile(\n",
    "                    optimizer=keras.optimizers.SGD(lr=0.01),\n",
    "                    loss = 'categorical_crossentropy',\n",
    "                    metrics = ['accuracy']\n",
    "                    )\n",
    "#Trains network over a number of epochs and evaluates network agains validation data\n",
    "#after each epoch\n",
    "for model in lenets:\n",
    "    model.fit(trainX, trainY, epochs = 5, validation_data = (testX, testY))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "#Predicting Label:\n",
    "\n",
    "print(np.argmax(lenet.predict(testX)[100]))\n",
    "print(np.argmax(testY[100]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26032/26032 [==============================] - 2s 84us/step\n",
      "Lenet accuracy:  0.8757298709280885\n",
      "Lenet loss:  0.4540770964693569\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Get accuracy for lenet\n",
    "sequentialLoss, sequentialAccuracy = lenet.evaluate(testX, testY)\n",
    "print('Lenet accuracy: ', sequentialAccuracy)\n",
    "print('Lenet loss: ', sequentialLoss)\n",
    "\n",
    "plt.plot(lenetEpochHistory.history['acc'])\n",
    "plt.plot(lenetEpochHistory.history['val_acc'])\n",
    "plt.title('Neural Network accuracy per epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training data', 'Validation data'])\n",
    "plt.show()\n",
    "\n",
    "plt.plot(lenetEpochHistory.history['loss'])\n",
    "plt.plot(lenetEpochHistory.history['val_loss'])\n",
    "plt.title('Neural Network loss per epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training data', 'Validation data'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Saliency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#This line outputs the layer_idx that the saliency is meant to be extracted from. (Usually the output layer pre-activation)\n",
    "utils.find_layer_idx(lenet, 'vis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check if that layer is correct by checking if the number of nodes matches the number of outputs\n",
    "get_num_filters(lenet.layers[9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check if the saliency map is working for the singular network\n",
    "input_idx = 1\n",
    "fig, ax = plt.subplots(nrows=1, ncols=2)\n",
    "saliency_map = visualize_saliency(model = lenet,layer_idx = 9, filter_indices = np.argmax(testY[input_idx]), seed_input = testX[input_idx])\n",
    "ax[0].imshow(saliency_map.reshape(32,32),interpolation='nearest')\n",
    "ax[1].imshow(testX[input_idx].reshape(32,32,3))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get optimisers for each network's output node to speed up saliency processing\n",
    "optimisers = []\n",
    "classifiers = lenets\n",
    "for i in range(0,len(classifiers)):\n",
    "    classifier_optmisers = []\n",
    "    for j in range(0,10):\n",
    "        opt = visualize_saliency_init(classifiers[i],9,filter_indices=j)\n",
    "        classifier_optmisers.append(opt)\n",
    "    optimisers.append(classifier_optmisers)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function to calculate ensemble outputs (for series of inputs) using mean of outputs\n",
    "def get_ensenmble_outputs(classifiers,classifier_inputs,number_of_outputs):\n",
    "    predictions = np.zeros((np.size(classifier_inputs, axis=0), np.size(number_of_outputs)))\n",
    "    for classifier in classifiers:\n",
    "        predictions = predictions + classifier.predict(classifier_inputs)\n",
    "    prediction_average = predictions / classifier_number\n",
    "    outputs = np.apply_along_axis(np.argmax, axis=1, arr=prediction_average)\n",
    "    return(outputs)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function to calculate ensemble output (for one input) using mean of outputs\n",
    "def get_ensemble_output(classifiers,classifier_input,number_of_outputs):\n",
    "    predictions = np.zeros(np.size(number_of_outputs))\n",
    "    for classifier in classifiers:\n",
    "        predictions = predictions + classifier.predict(np.expand_dims(classifier_input,axis=0))\n",
    "    prediction_average = predictions / classifier_number\n",
    "    output = np.argmax(prediction_average)\n",
    "    return(output)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_ensemble_output(lenets,testX[100],10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "correct = 0\n",
    "for i in range(0,len(testX)):\n",
    "    if (get_ensemble_output(lenets,testX[i],10) == np.argmax(testY[i])):\n",
    "        correct = correct + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23023\n",
      "26032\n"
     ]
    }
   ],
   "source": [
    "print(correct)\n",
    "print(len(testX))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to generate multiple saliency maps for each input\n",
    "\n",
    "# If doing this over multiple inputs at a time, it is faster to go over multiple inputs\n",
    "# with the same classifier and then doing the same for the different classifiers. This is \n",
    "# because switching optimisers is computationally expensive.\n",
    "\n",
    "def generate_saliency_maps_for_one_input(classifiers,classifier_input,optimisers,visualised_layer):\n",
    "    output_node = get_ensemble_output(classifiers,classifier_input,len(optimisers))\n",
    "    saliency_maps = np.zeros((len(classifiers),classifier_input.shape[0],classifier_input.shape[1]))\n",
    "    for i in range(0,len(classifiers)):\n",
    "        saliency_maps[i] = visualize_saliency_run(model = classifiers[i],layer_idx = visualised_layer, opt = optimisers[i][output_node], seed_input = classifier_input)\n",
    "    return(saliency_maps)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function to visualise the multiple saliency maps\n",
    "def visualize_saliency_maps(classifier_input,saliency_maps):\n",
    "    fig, ax = plt.subplots(nrows=1, ncols=len(saliency_maps)+1, figsize = (15,15))\n",
    "    i = 1\n",
    "    for s_map in saliency_maps:\n",
    "        ax[i].imshow(s_map)\n",
    "        i = i+1\n",
    "    ax[0].imshow(classifier_input)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute difference of saliency maps\n",
    "def generate_uncertainty_map(saliency_maps):\n",
    "    return(np.std(saliency_maps,axis=0)/np.average(saliency_maps,axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Wrapper function to arrive at uncertainty output using classifiers and input\n",
    "def calculate_uncertainty(classifiers,classifier_input,optimisers,visualised_layer):\n",
    "    \n",
    "    saliency_maps = generate_saliency_maps_for_one_input(classifiers = classifiers,\n",
    "                                  classifier_input = classifier_input,\n",
    "                                  optimisers = optimisers,\n",
    "                                  visualised_layer = visualised_layer)\n",
    "    \n",
    "    uncertainty_map = generate_uncertainty_map(saliency_maps)\n",
    "    \n",
    "    return(np.average(uncertainty_map))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute difference of saliency maps\n",
    "def calculate_uncertainty_with_maps(saliency_maps):\n",
    "    return(np.mean(np.std(saliency_maps,axis=0)/np.average(saliency_maps,axis=0)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_saliency_maps_for_multiple_inputs(classifier,classifier_inputs,classifier_outputs,\n",
    "                                               classifier_optimisers,visualised_layer):\n",
    "    \n",
    "    saliency_maps = []\n",
    "    for input_idx in tqdm(range(0,np.size(classifier_inputs,axis=0))):\n",
    "        classifier_input = classifier_inputs[input_idx]\n",
    "        output_node = classifier_outputs[input_idx]\n",
    "        saliency_maps.append(visualize_saliency_run(model = classifier,\n",
    "                                                    layer_idx = 9, \n",
    "                                                    opt = classifier_optimisers[output_node],   \n",
    "                                                    seed_input = classifier_input))\n",
    "    return(saliency_maps)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_ensemble_saliency_maps_for_multiple_inputs(classifiers,\n",
    "                                                        classifier_inputs,classifier_outputs,\n",
    "                                                        optimisers,visualised_layer):\n",
    "    saliency_maps = []\n",
    "    for classifier_idx in range(0,len(classifiers)):\n",
    "        saliency_maps.append(generate_saliency_maps_for_multiple_inputs(\n",
    "                                classifiers[classifier_idx],\n",
    "                                classifier_inputs,\n",
    "                                classifier_outputs,\n",
    "                                optimisers[classifier_idx],\n",
    "                                9))\n",
    "    return(saliency_maps)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "MNIST_ensemble_predicted_outputs = get_ensenmble_outputs(lenets, testX,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Generate saliency maps examples\n",
    "input_idx = 1\n",
    "maps = generate_saliency_maps_for_one_input(classifiers = lenets,\n",
    "                                            classifier_input = testX[input_idx],\n",
    "                                            optimisers = optimisers,\n",
    "                                            visualised_layer = 9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise saliency maps examples\n",
    "visualize_saliency_maps(classifier_input = testX[input_idx].reshape(32,32,3),\n",
    "                        saliency_maps = maps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998807907104), mean=0.12792079595087102, variance=0.0170123257858514, skewness=2.1790803129070473, kurtosis=6.620933458020604)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998807907104), mean=0.12295046078435234, variance=0.018370001177881925, skewness=2.497011057362971, kurtosis=8.155779827413372)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998807907104), mean=0.09845377319788895, variance=0.01215339734847956, skewness=3.176326463191577, kurtosis=14.584482403031679)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998807907104), mean=0.09734616285658149, variance=0.011681232979426998, skewness=3.27218278405605, kurtosis=16.562940968686355)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998807907104), mean=0.10785843135579398, variance=0.014410939378111994, skewness=2.8311815403434544, kurtosis=11.420884746973803)\n"
     ]
    }
   ],
   "source": [
    "for mapx in maps:\n",
    "    print(describe(mapx,axis=None))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise uncertainty map example\n",
    "uncertainty_map = generate_uncertainty_map(maps)\n",
    "plt.imshow(uncertainty_map)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DescribeResult(nobs=1024, minmax=(0.10213731648593498, 1.4368504661690307), mean=0.5225563051089794, variance=0.03504102478751463, skewness=0.515477949039703, kurtosis=0.7264498305875686)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe(uncertainty_map,axis=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5225563051089794"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute the average difference value for each pixel (uncertainty)\n",
    "np.average(uncertainty_map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5303778983193623\n"
     ]
    }
   ],
   "source": [
    "# Generating example using wrapper function\n",
    "input_idx = 4\n",
    "uncertainty = calculate_uncertainty(classifiers = lenets,\n",
    "                              classifier_input = testX[input_idx],\n",
    "                              optimisers = optimisers,\n",
    "                              visualised_layer = 9)\n",
    "print(uncertainty)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate_saliency_maps_for_multiple_inputs(lenets[0],testX,ensemble_predicted_outputs,optimisers[0],9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 26032/26032 [01:34<00:00, 275.10it/s]\n",
      "100%|██████████| 26032/26032 [01:34<00:00, 276.31it/s]\n",
      "100%|██████████| 26032/26032 [01:34<00:00, 275.83it/s]\n",
      "100%|██████████| 26032/26032 [01:34<00:00, 275.21it/s]\n",
      "100%|██████████| 26032/26032 [01:34<00:00, 276.39it/s]\n"
     ]
    }
   ],
   "source": [
    "MNIST_saliency_maps = generate_ensemble_saliency_maps_for_multiple_inputs(lenets,testX,MNIST_ensemble_predicted_outputs,optimisers,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "MNIST_saliency_maps = np.swapaxes(MNIST_saliency_maps,0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualize_saliency_maps(testX[1].reshape(32,32,3),MNIST_saliency_maps[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "MNIST_uncertainties = np.zeros(np.size(MNIST_saliency_maps,axis=0))\n",
    "for i in range(0,np.size(MNIST_saliency_maps, axis=0)):\n",
    "    MNIST_uncertainties[i] = calculate_uncertainty_with_maps(MNIST_saliency_maps[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5158345103263855"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MNIST_uncertainties[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(MNIST_uncertainties)\n",
    "plt.savefig(\"SVHN_uncertainties.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DescribeResult(nobs=26032, minmax=(0.4643207788467407, 0.6340411901473999), mean=0.5290794368551675, variance=0.00034502571660567015, skewness=0.46033680080304895, kurtosis=0.6285538783595879)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe(MNIST_uncertainties)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Not-MNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_cifar = tf.keras.datasets.cifar10.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 32, 32, 3)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.shape(data_cifar[1][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_cifar = np.concatenate((data_cifar[0][0],data_cifar[1][0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(data_cifar[1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DescribeResult(nobs=184320000, minmax=(0, 255), mean=120.84449672851562, variance=4113.421953185807, skewness=0.21918106646988617, kurtosis=-0.7942807501463967)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe(data_cifar,axis=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_cifar = data_cifar.astype(\"float32\") / 255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DescribeResult(nobs=184320000, minmax=(0.0, 1.0), mean=0.47389895, variance=0.06325926, skewness=0.21919307112693787, kurtosis=-0.7942882915073182)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe(data_cifar,axis=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "NotMNIST_ensemble_predicted_outputs = get_ensenmble_outputs(lenets, data_cifar,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 60000/60000 [03:39<00:00, 272.90it/s]\n",
      "100%|██████████| 60000/60000 [03:39<00:00, 273.01it/s]\n",
      "100%|██████████| 60000/60000 [03:39<00:00, 272.86it/s]\n",
      "100%|██████████| 60000/60000 [03:40<00:00, 272.04it/s]\n",
      "100%|██████████| 60000/60000 [03:40<00:00, 271.57it/s]\n"
     ]
    }
   ],
   "source": [
    "NotMNIST_saliency_maps = generate_ensemble_saliency_maps_for_multiple_inputs(lenets,data_cifar,NotMNIST_ensemble_predicted_outputs,optimisers,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "NotMNIST_saliency_maps = np.swapaxes(NotMNIST_saliency_maps,0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualize_saliency_maps(data_cifar[1].reshape(32,32,3),NotMNIST_saliency_maps[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DescribeResult(nobs=1024, minmax=(0.0, 0.99999976), mean=0.1540072, variance=0.025032543, skewness=2.3973796367645264, kurtosis=7.167797117550807)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998), mean=0.14078349, variance=0.020158337, skewness=2.1368396282196045, kurtosis=5.641140788144536)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999999), mean=0.11194782, variance=0.016163215, skewness=2.527195692062378, kurtosis=8.727447352530106)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998), mean=0.14778914, variance=0.024563778, skewness=2.094128131866455, kurtosis=4.7355747869444365)\n",
      "DescribeResult(nobs=1024, minmax=(0.0, 0.9999998), mean=0.115295276, variance=0.015085169, skewness=2.6432173252105713, kurtosis=9.984828033156838)\n"
     ]
    }
   ],
   "source": [
    "for mapx in NotMNIST_saliency_maps[1]:\n",
    "    print(describe(mapx,axis=None))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualise uncertainty map example\n",
    "uncertainty_map = generate_uncertainty_map(NotMNIST_saliency_maps[1])\n",
    "plt.imshow(uncertainty_map)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DescribeResult(nobs=1024, minmax=(0.07025574, 1.4512383), mean=0.5579122, variance=0.040194575, skewness=0.42802953720092773, kurtosis=0.3678301609274124)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe(uncertainty_map,axis=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "NotMNIST_uncertainties = np.zeros(np.size(NotMNIST_saliency_maps,axis=0))\n",
    "for i in range(0,np.size(NotMNIST_saliency_maps, axis=0)):\n",
    "    NotMNIST_uncertainties[i] = calculate_uncertainty_with_maps(NotMNIST_saliency_maps[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.548844575881958"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NotMNIST_uncertainties[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(NotMNIST_uncertainties)\n",
    "plt.savefig(\"CIFAR10_uncertainties.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DescribeResult(nobs=60000, minmax=(0.48068466782569885, 0.6486691236495972), mean=0.5429443788955609, variance=0.00034733517774912656, skewness=0.46552481764882025, kurtosis=0.6085262819049602)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "describe(NotMNIST_uncertainties)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Misc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.182341\n",
      "[2.8073987e-06 1.2493449e-04 9.9524915e-01 1.8336752e-03 4.2502265e-04\n",
      " 9.9248234e-07 1.6648237e-06 2.0413329e-03 2.9920906e-04 2.1296415e-05]\n"
     ]
    }
   ],
   "source": [
    "#This prints out the pre-activation outputs for the output layer (for curiosity)\n",
    "intermediate_layer_model = keras.Model(inputs=lenet.input,\n",
    "                                 outputs=lenet.get_layer(\"vis\").output)\n",
    "intermediate_output = intermediate_layer_model.predict(testX)[input_idx]\n",
    "print(max(intermediate_output))\n",
    "print(lenet.predict(testX)[input_idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This is what happens if we don't normalise the pixels' standard deviation\n",
    "plt.imshow(np.std(maps,axis=0))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "24\n",
      "27\n",
      "48\n",
      "55\n",
      "63\n",
      "70\n",
      "75\n",
      "98\n",
      "102\n",
      "123\n",
      "130\n",
      "146\n",
      "167\n",
      "176\n",
      "180\n",
      "181\n",
      "186\n",
      "194\n",
      "200\n",
      "206\n",
      "210\n",
      "219\n",
      "223\n",
      "253\n",
      "260\n",
      "263\n",
      "273\n",
      "284\n",
      "285\n",
      "311\n",
      "336\n",
      "337\n",
      "338\n",
      "339\n",
      "349\n",
      "360\n",
      "366\n",
      "368\n",
      "371\n",
      "374\n",
      "378\n",
      "392\n",
      "397\n",
      "399\n",
      "400\n",
      "404\n",
      "408\n",
      "412\n",
      "435\n",
      "439\n",
      "442\n",
      "445\n",
      "446\n",
      "447\n",
      "454\n",
      "481\n",
      "503\n",
      "508\n",
      "511\n",
      "527\n",
      "528\n",
      "570\n",
      "581\n",
      "585\n",
      "597\n",
      "598\n",
      "610\n",
      "611\n",
      "612\n",
      "622\n",
      "639\n",
      "644\n",
      "657\n",
      "660\n",
      "666\n",
      "678\n",
      "679\n",
      "682\n",
      "695\n",
      "696\n",
      "708\n",
      "710\n",
      "711\n",
      "716\n",
      "735\n",
      "736\n",
      "740\n",
      "742\n",
      "748\n",
      "751\n",
      "754\n",
      "757\n",
      "762\n",
      "766\n",
      "773\n",
      "779\n",
      "794\n",
      "797\n",
      "798\n",
      "810\n",
      "814\n",
      "816\n",
      "830\n",
      "835\n",
      "877\n",
      "882\n",
      "884\n",
      "896\n",
      "926\n",
      "947\n",
      "969\n",
      "972\n",
      "973\n",
      "1013\n",
      "1024\n",
      "1025\n",
      "1027\n",
      "1029\n",
      "1033\n",
      "1039\n",
      "1040\n",
      "1041\n",
      "1056\n",
      "1084\n",
      "1091\n",
      "1094\n",
      "1098\n",
      "1117\n",
      "1120\n",
      "1122\n",
      "1124\n",
      "1128\n",
      "1134\n",
      "1138\n",
      "1142\n",
      "1154\n",
      "1167\n",
      "1170\n",
      "1174\n",
      "1177\n",
      "1199\n",
      "1203\n",
      "1204\n",
      "1210\n",
      "1226\n",
      "1235\n",
      "1245\n",
      "1253\n",
      "1260\n",
      "1264\n",
      "1282\n",
      "1283\n",
      "1292\n",
      "1302\n",
      "1311\n",
      "1313\n",
      "1335\n",
      "1341\n",
      "1345\n",
      "1361\n",
      "1364\n",
      "1369\n",
      "1375\n",
      "1377\n",
      "1387\n",
      "1392\n",
      "1397\n",
      "1398\n",
      "1405\n",
      "1407\n",
      "1423\n",
      "1432\n",
      "1439\n",
      "1445\n",
      "1448\n",
      "1454\n",
      "1461\n",
      "1464\n",
      "1476\n",
      "1492\n",
      "1498\n",
      "1502\n",
      "1514\n",
      "1517\n",
      "1518\n",
      "1527\n",
      "1532\n",
      "1533\n",
      "1535\n",
      "1541\n",
      "1546\n",
      "1552\n",
      "1570\n",
      "1617\n",
      "1626\n",
      "1636\n",
      "1644\n",
      "1648\n",
      "1652\n",
      "1663\n",
      "1683\n",
      "1689\n",
      "1690\n",
      "1697\n",
      "1704\n",
      "1727\n",
      "1760\n",
      "1762\n",
      "1773\n",
      "1793\n",
      "1799\n",
      "1804\n",
      "1808\n",
      "1813\n",
      "1814\n",
      "1818\n",
      "1824\n",
      "1827\n",
      "1830\n",
      "1838\n",
      "1849\n",
      "1869\n",
      "1872\n",
      "1876\n",
      "1888\n",
      "1893\n",
      "1894\n",
      "1911\n",
      "1915\n",
      "1923\n",
      "1935\n",
      "1944\n",
      "1958\n",
      "1973\n",
      "1979\n",
      "2012\n",
      "2021\n",
      "2023\n",
      "2028\n",
      "2029\n",
      "2052\n",
      "2069\n",
      "2072\n",
      "2073\n",
      "2076\n",
      "2095\n",
      "2096\n",
      "2099\n",
      "2109\n",
      "2144\n",
      "2152\n",
      "2156\n",
      "2163\n",
      "2165\n",
      "2166\n",
      "2170\n",
      "2171\n",
      "2189\n",
      "2199\n",
      "2213\n",
      "2214\n",
      "2232\n",
      "2238\n",
      "2240\n",
      "2250\n",
      "2259\n",
      "2260\n",
      "2261\n",
      "2275\n",
      "2290\n",
      "2302\n",
      "2306\n",
      "2319\n",
      "2331\n",
      "2337\n",
      "2343\n",
      "2350\n",
      "2380\n",
      "2409\n",
      "2410\n",
      "2418\n",
      "2420\n",
      "2425\n",
      "2436\n",
      "2448\n",
      "2457\n",
      "2462\n",
      "2465\n",
      "2491\n",
      "2499\n",
      "2501\n",
      "2507\n",
      "2521\n",
      "2530\n",
      "2534\n",
      "2547\n",
      "2548\n",
      "2554\n",
      "2558\n",
      "2567\n",
      "2570\n",
      "2572\n",
      "2573\n",
      "2580\n",
      "2581\n",
      "2601\n",
      "2607\n",
      "2611\n",
      "2615\n",
      "2616\n",
      "2619\n",
      "2653\n",
      "2661\n",
      "2667\n",
      "2674\n",
      "2693\n",
      "2694\n",
      "2701\n",
      "2709\n",
      "2712\n",
      "2719\n",
      "2725\n",
      "2759\n",
      "2761\n",
      "2770\n",
      "2778\n",
      "2808\n",
      "2827\n",
      "2833\n",
      "2837\n",
      "2844\n",
      "2852\n",
      "2858\n",
      "2864\n",
      "2869\n",
      "2884\n",
      "2888\n",
      "2893\n",
      "2895\n",
      "2901\n",
      "2904\n",
      "2916\n",
      "2923\n",
      "2932\n",
      "2935\n",
      "2940\n",
      "2951\n",
      "2953\n",
      "2958\n",
      "2971\n",
      "2977\n",
      "2980\n",
      "2985\n",
      "2986\n",
      "3003\n",
      "3004\n",
      "3009\n",
      "3010\n",
      "3026\n",
      "3027\n",
      "3029\n",
      "3034\n",
      "3046\n",
      "3081\n",
      "3082\n",
      "3088\n",
      "3090\n",
      "3092\n",
      "3104\n",
      "3116\n",
      "3117\n",
      "3118\n",
      "3127\n",
      "3131\n",
      "3132\n",
      "3143\n",
      "3144\n",
      "3150\n",
      "3160\n",
      "3164\n",
      "3166\n",
      "3168\n",
      "3178\n",
      "3184\n",
      "3192\n",
      "3194\n",
      "3199\n",
      "3209\n",
      "3211\n",
      "3215\n",
      "3226\n",
      "3234\n",
      "3246\n",
      "3253\n",
      "3254\n",
      "3264\n",
      "3277\n",
      "3278\n",
      "3279\n",
      "3280\n",
      "3288\n",
      "3289\n",
      "3291\n",
      "3300\n",
      "3307\n",
      "3324\n",
      "3331\n",
      "3334\n",
      "3360\n",
      "3364\n",
      "3384\n",
      "3386\n",
      "3387\n",
      "3395\n",
      "3401\n",
      "3412\n",
      "3446\n",
      "3465\n",
      "3466\n",
      "3467\n",
      "3473\n",
      "3475\n",
      "3482\n",
      "3498\n",
      "3502\n",
      "3507\n",
      "3515\n",
      "3517\n",
      "3522\n",
      "3532\n",
      "3534\n",
      "3541\n",
      "3543\n",
      "3547\n",
      "3554\n",
      "3573\n",
      "3577\n",
      "3588\n",
      "3598\n",
      "3599\n",
      "3608\n",
      "3621\n",
      "3625\n",
      "3626\n",
      "3636\n",
      "3646\n",
      "3648\n",
      "3652\n",
      "3670\n",
      "3679\n",
      "3695\n",
      "3699\n",
      "3700\n",
      "3704\n",
      "3709\n",
      "3710\n",
      "3712\n",
      "3720\n",
      "3723\n",
      "3729\n",
      "3744\n",
      "3747\n",
      "3767\n",
      "3775\n",
      "3779\n",
      "3781\n",
      "3801\n",
      "3805\n",
      "3811\n",
      "3813\n",
      "3821\n",
      "3822\n",
      "3834\n",
      "3848\n",
      "3852\n",
      "3867\n",
      "3868\n",
      "3871\n",
      "3873\n",
      "3884\n",
      "3900\n",
      "3914\n",
      "3920\n",
      "3922\n",
      "3926\n",
      "3930\n",
      "3932\n",
      "3933\n",
      "3947\n",
      "3948\n",
      "3964\n",
      "3966\n",
      "3968\n",
      "3969\n",
      "3976\n",
      "3999\n",
      "4003\n",
      "4005\n",
      "4022\n",
      "4036\n",
      "4038\n",
      "4039\n",
      "4041\n",
      "4042\n",
      "4051\n",
      "4059\n",
      "4072\n",
      "4076\n",
      "4078\n",
      "4082\n",
      "4102\n",
      "4114\n",
      "4121\n",
      "4134\n",
      "4140\n",
      "4146\n",
      "4162\n",
      "4168\n",
      "4176\n",
      "4180\n",
      "4187\n",
      "4189\n",
      "4191\n",
      "4197\n",
      "4198\n",
      "4201\n",
      "4205\n",
      "4208\n",
      "4216\n",
      "4228\n",
      "4230\n",
      "4234\n",
      "4273\n",
      "4278\n",
      "4284\n",
      "4291\n",
      "4304\n",
      "4309\n",
      "4318\n",
      "4328\n",
      "4333\n",
      "4334\n",
      "4335\n",
      "4342\n",
      "4350\n",
      "4362\n",
      "4365\n",
      "4369\n",
      "4372\n",
      "4376\n",
      "4385\n",
      "4387\n",
      "4395\n",
      "4396\n",
      "4401\n",
      "4403\n",
      "4413\n",
      "4419\n",
      "4421\n",
      "4423\n",
      "4441\n",
      "4475\n",
      "4489\n",
      "4491\n",
      "4494\n",
      "4503\n",
      "4505\n",
      "4507\n",
      "4517\n",
      "4523\n",
      "4544\n",
      "4552\n",
      "4564\n",
      "4565\n",
      "4571\n",
      "4585\n",
      "4587\n",
      "4616\n",
      "4640\n",
      "4647\n",
      "4654\n",
      "4678\n",
      "4683\n",
      "4686\n",
      "4693\n",
      "4740\n",
      "4749\n",
      "4752\n",
      "4762\n",
      "4769\n",
      "4779\n",
      "4803\n",
      "4805\n",
      "4813\n",
      "4816\n",
      "4817\n",
      "4844\n",
      "4850\n",
      "4853\n",
      "4861\n",
      "4866\n",
      "4887\n",
      "4893\n",
      "4903\n",
      "4904\n",
      "4918\n",
      "4982\n",
      "4990\n",
      "4991\n",
      "4995\n",
      "5003\n",
      "5024\n",
      "5032\n",
      "5035\n",
      "5038\n",
      "5042\n",
      "5046\n",
      "5062\n",
      "5082\n",
      "5085\n",
      "5091\n",
      "5094\n",
      "5095\n",
      "5099\n",
      "5117\n",
      "5120\n",
      "5133\n",
      "5137\n",
      "5157\n",
      "5163\n",
      "5211\n",
      "5212\n",
      "5223\n",
      "5225\n",
      "5236\n",
      "5243\n",
      "5249\n",
      "5250\n",
      "5271\n",
      "5273\n",
      "5285\n",
      "5289\n",
      "5290\n",
      "5298\n",
      "5311\n",
      "5313\n",
      "5316\n",
      "5326\n",
      "5329\n",
      "5332\n",
      "5357\n",
      "5358\n",
      "5371\n",
      "5374\n",
      "5381\n",
      "5390\n",
      "5405\n",
      "5414\n",
      "5416\n",
      "5426\n",
      "5428\n",
      "5429\n",
      "5435\n",
      "5441\n",
      "5453\n",
      "5454\n",
      "5466\n",
      "5484\n",
      "5485\n",
      "5490\n",
      "5531\n",
      "5551\n",
      "5556\n",
      "5560\n",
      "5561\n",
      "5564\n",
      "5572\n",
      "5576\n",
      "5578\n",
      "5593\n",
      "5602\n",
      "5606\n",
      "5612\n",
      "5630\n",
      "5656\n",
      "5665\n",
      "5679\n",
      "5680\n",
      "5681\n",
      "5682\n",
      "5689\n",
      "5694\n",
      "5704\n",
      "5719\n",
      "5727\n",
      "5729\n",
      "5743\n",
      "5747\n",
      "5754\n",
      "5755\n",
      "5757\n",
      "5759\n",
      "5765\n",
      "5773\n",
      "5779\n",
      "5783\n",
      "5789\n",
      "5799\n",
      "5811\n",
      "5815\n",
      "5835\n",
      "5841\n",
      "5842\n",
      "5873\n",
      "5882\n",
      "5883\n",
      "5888\n",
      "5894\n",
      "5908\n",
      "5909\n",
      "5925\n",
      "5945\n",
      "5951\n",
      "5964\n",
      "5968\n",
      "5970\n",
      "5972\n",
      "5978\n",
      "5995\n",
      "6003\n",
      "6008\n",
      "6022\n",
      "6024\n",
      "6051\n",
      "6068\n",
      "6074\n",
      "6082\n",
      "6102\n",
      "6103\n",
      "6104\n",
      "6113\n",
      "6147\n",
      "6148\n",
      "6151\n",
      "6154\n",
      "6175\n",
      "6179\n",
      "6180\n",
      "6183\n",
      "6187\n",
      "6188\n",
      "6189\n",
      "6199\n",
      "6203\n",
      "6206\n",
      "6211\n",
      "6213\n",
      "6215\n",
      "6224\n",
      "6225\n",
      "6226\n",
      "6235\n",
      "6236\n",
      "6242\n",
      "6250\n",
      "6252\n",
      "6256\n",
      "6261\n",
      "6263\n",
      "6266\n",
      "6271\n",
      "6272\n",
      "6274\n",
      "6279\n",
      "6282\n",
      "6286\n",
      "6319\n",
      "6322\n",
      "6324\n",
      "6334\n",
      "6337\n",
      "6340\n",
      "6345\n",
      "6355\n",
      "6357\n",
      "6362\n",
      "6375\n",
      "6377\n",
      "6379\n",
      "6380\n",
      "6387\n",
      "6394\n",
      "6403\n",
      "6425\n",
      "6440\n",
      "6445\n",
      "6449\n",
      "6451\n",
      "6453\n",
      "6459\n",
      "6461\n",
      "6466\n",
      "6467\n",
      "6476\n",
      "6480\n",
      "6491\n",
      "6498\n",
      "6501\n",
      "6504\n",
      "6507\n",
      "6513\n",
      "6523\n",
      "6529\n",
      "6539\n",
      "6548\n",
      "6550\n",
      "6552\n",
      "6555\n",
      "6556\n",
      "6561\n",
      "6591\n",
      "6597\n",
      "6608\n",
      "6614\n",
      "6627\n",
      "6638\n",
      "6663\n",
      "6678\n",
      "6688\n",
      "6690\n",
      "6700\n",
      "6702\n",
      "6704\n",
      "6706\n",
      "6725\n",
      "6736\n",
      "6738\n",
      "6750\n",
      "6762\n",
      "6763\n",
      "6765\n",
      "6774\n",
      "6779\n",
      "6790\n",
      "6791\n",
      "6793\n",
      "6805\n",
      "6831\n",
      "6844\n",
      "6851\n",
      "6879\n",
      "6883\n",
      "6911\n",
      "6932\n",
      "6955\n",
      "6971\n",
      "6975\n",
      "6978\n",
      "6992\n",
      "7000\n",
      "7026\n",
      "7043\n",
      "7055\n",
      "7059\n",
      "7060\n",
      "7062\n",
      "7070\n",
      "7075\n",
      "7081\n",
      "7082\n",
      "7090\n",
      "7103\n",
      "7106\n",
      "7123\n",
      "7131\n",
      "7141\n",
      "7142\n",
      "7148\n",
      "7161\n",
      "7166\n",
      "7169\n",
      "7171\n",
      "7177\n",
      "7190\n",
      "7202\n",
      "7203\n",
      "7229\n",
      "7242\n",
      "7250\n",
      "7254\n",
      "7264\n",
      "7270\n",
      "7274\n",
      "7278\n",
      "7285\n",
      "7300\n",
      "7301\n",
      "7324\n",
      "7339\n",
      "7347\n",
      "7350\n",
      "7351\n",
      "7372\n",
      "7376\n",
      "7383\n",
      "7384\n",
      "7385\n",
      "7396\n",
      "7400\n",
      "7418\n",
      "7421\n",
      "7450\n",
      "7462\n",
      "7471\n",
      "7477\n",
      "7483\n",
      "7492\n",
      "7497\n",
      "7498\n",
      "7504\n",
      "7505\n",
      "7511\n",
      "7512\n",
      "7513\n",
      "7530\n",
      "7531\n",
      "7535\n",
      "7546\n",
      "7550\n",
      "7565\n",
      "7588\n",
      "7599\n",
      "7600\n",
      "7601\n",
      "7611\n",
      "7616\n",
      "7628\n",
      "7644\n",
      "7646\n",
      "7648\n",
      "7649\n",
      "7654\n",
      "7660\n",
      "7669\n",
      "7675\n",
      "7685\n",
      "7697\n",
      "7701\n",
      "7717\n",
      "7723\n",
      "7725\n",
      "7727\n",
      "7732\n",
      "7743\n",
      "7744\n",
      "7751\n",
      "7753\n",
      "7772\n",
      "7773\n",
      "7777\n",
      "7789\n",
      "7790\n",
      "7791\n",
      "7803\n",
      "7814\n",
      "7820\n",
      "7830\n",
      "7835\n",
      "7838\n",
      "7842\n",
      "7875\n",
      "7877\n",
      "7878\n",
      "7896\n",
      "7911\n",
      "7919\n",
      "7940\n",
      "7962\n",
      "7982\n",
      "7983\n",
      "7993\n",
      "8007\n",
      "8023\n",
      "8025\n",
      "8038\n",
      "8043\n",
      "8044\n",
      "8045\n",
      "8058\n",
      "8086\n",
      "8094\n",
      "8097\n",
      "8099\n",
      "8112\n",
      "8116\n",
      "8121\n",
      "8137\n",
      "8138\n",
      "8143\n",
      "8152\n",
      "8161\n",
      "8168\n",
      "8176\n",
      "8180\n",
      "8183\n",
      "8193\n",
      "8203\n",
      "8206\n",
      "8227\n",
      "8229\n",
      "8231\n",
      "8244\n",
      "8251\n",
      "8262\n",
      "8264\n",
      "8278\n",
      "8291\n",
      "8294\n",
      "8301\n",
      "8321\n",
      "8350\n",
      "8353\n",
      "8355\n",
      "8358\n",
      "8381\n",
      "8383\n",
      "8385\n",
      "8393\n",
      "8397\n",
      "8401\n",
      "8402\n",
      "8407\n",
      "8409\n",
      "8438\n",
      "8455\n",
      "8457\n",
      "8460\n",
      "8461\n",
      "8468\n",
      "8473\n",
      "8476\n",
      "8486\n",
      "8490\n",
      "8494\n",
      "8496\n",
      "8510\n",
      "8512\n",
      "8525\n",
      "8536\n",
      "8537\n",
      "8539\n",
      "8547\n",
      "8552\n",
      "8581\n",
      "8585\n",
      "8589\n",
      "8593\n",
      "8597\n",
      "8602\n",
      "8609\n",
      "8611\n",
      "8618\n",
      "8628\n",
      "8636\n",
      "8649\n",
      "8651\n",
      "8653\n",
      "8654\n",
      "8664\n",
      "8670\n",
      "8681\n",
      "8684\n",
      "8699\n",
      "8702\n",
      "8705\n",
      "8708\n",
      "8714\n",
      "8726\n",
      "8730\n",
      "8734\n",
      "8736\n",
      "8754\n",
      "8758\n",
      "8761\n",
      "8763\n",
      "8764\n",
      "8768\n",
      "8773\n",
      "8780\n",
      "8784\n",
      "8786\n",
      "8787\n",
      "8795\n",
      "8798\n",
      "8805\n",
      "8825\n",
      "8835\n",
      "8859\n",
      "8861\n",
      "8879\n",
      "8916\n",
      "8917\n",
      "8918\n",
      "8921\n",
      "8925\n",
      "8927\n",
      "8939\n",
      "8954\n",
      "8958\n",
      "8976\n",
      "8993\n",
      "8997\n",
      "9010\n",
      "9040\n",
      "9044\n",
      "9055\n",
      "9057\n",
      "9062\n",
      "9063\n",
      "9069\n",
      "9070\n",
      "9073\n",
      "9076\n",
      "9089\n",
      "9104\n",
      "9126\n",
      "9130\n",
      "9141\n",
      "9161\n",
      "9177\n",
      "9178\n",
      "9181\n",
      "9188\n",
      "9197\n",
      "9204\n",
      "9209\n",
      "9212\n",
      "9215\n",
      "9247\n",
      "9254\n",
      "9268\n",
      "9275\n",
      "9296\n",
      "9302\n",
      "9306\n",
      "9331\n",
      "9340\n",
      "9341\n",
      "9348\n",
      "9362\n",
      "9363\n",
      "9369\n",
      "9374\n",
      "9378\n",
      "9387\n",
      "9390\n",
      "9400\n",
      "9407\n",
      "9410\n",
      "9411\n",
      "9414\n",
      "9419\n",
      "9434\n",
      "9456\n",
      "9488\n",
      "9495\n",
      "9496\n",
      "9508\n",
      "9512\n",
      "9531\n",
      "9542\n",
      "9547\n",
      "9549\n",
      "9556\n",
      "9564\n",
      "9565\n",
      "9569\n",
      "9586\n",
      "9596\n",
      "9603\n",
      "9605\n",
      "9609\n",
      "9627\n",
      "9634\n",
      "9637\n",
      "9639\n",
      "9644\n",
      "9646\n",
      "9648\n",
      "9667\n",
      "9674\n",
      "9682\n",
      "9689\n",
      "9694\n",
      "9717\n",
      "9719\n",
      "9721\n",
      "9729\n",
      "9742\n",
      "9743\n",
      "9767\n",
      "9770\n",
      "9778\n",
      "9781\n",
      "9783\n",
      "9792\n",
      "9793\n",
      "9794\n",
      "9799\n",
      "9803\n",
      "9807\n",
      "9810\n",
      "9814\n",
      "9842\n",
      "9845\n",
      "9847\n",
      "9848\n",
      "9849\n",
      "9850\n",
      "9853\n",
      "9864\n",
      "9867\n",
      "9885\n",
      "9892\n",
      "9894\n",
      "9898\n",
      "9899\n",
      "9901\n",
      "9902\n",
      "9905\n",
      "9908\n",
      "9929\n",
      "9940\n",
      "9961\n",
      "9962\n",
      "9965\n",
      "9973\n",
      "9977\n",
      "9980\n",
      "9982\n",
      "9989\n",
      "10020\n",
      "10030\n",
      "10068\n",
      "10070\n",
      "10078\n",
      "10079\n",
      "10098\n",
      "10104\n",
      "10105\n",
      "10111\n",
      "10139\n",
      "10145\n",
      "10154\n",
      "10172\n",
      "10177\n",
      "10178\n",
      "10190\n",
      "10203\n",
      "10205\n",
      "10215\n",
      "10225\n",
      "10240\n",
      "10246\n",
      "10253\n",
      "10256\n",
      "10259\n",
      "10260\n",
      "10264\n",
      "10272\n",
      "10273\n",
      "10277\n",
      "10297\n",
      "10311\n",
      "10325\n",
      "10330\n",
      "10333\n",
      "10337\n",
      "10343\n",
      "10352\n",
      "10366\n",
      "10372\n",
      "10374\n",
      "10404\n",
      "10416\n",
      "10421\n",
      "10431\n",
      "10454\n",
      "10460\n",
      "10484\n",
      "10487\n",
      "10497\n",
      "10503\n",
      "10533\n",
      "10540\n",
      "10544\n",
      "10550\n",
      "10561\n",
      "10562\n",
      "10564\n",
      "10565\n",
      "10568\n",
      "10585\n",
      "10594\n",
      "10603\n",
      "10612\n",
      "10617\n",
      "10627\n",
      "10631\n",
      "10638\n",
      "10643\n",
      "10677\n",
      "10685\n",
      "10686\n",
      "10692\n",
      "10696\n",
      "10704\n",
      "10707\n",
      "10708\n",
      "10711\n",
      "10716\n",
      "10724\n",
      "10739\n",
      "10743\n",
      "10746\n",
      "10776\n",
      "10803\n",
      "10810\n",
      "10824\n",
      "10843\n",
      "10853\n",
      "10860\n",
      "10863\n",
      "10870\n",
      "10873\n",
      "10881\n",
      "10882\n",
      "10892\n",
      "10897\n",
      "10901\n",
      "10912\n",
      "10913\n",
      "10917\n",
      "10937\n",
      "10939\n",
      "10951\n",
      "10952\n",
      "10953\n",
      "10954\n",
      "10955\n",
      "10956\n",
      "10970\n",
      "10979\n",
      "10992\n",
      "10997\n",
      "11021\n",
      "11040\n",
      "11045\n",
      "11060\n",
      "11063\n",
      "11076\n",
      "11090\n",
      "11095\n",
      "11104\n",
      "11107\n",
      "11111\n",
      "11113\n",
      "11118\n",
      "11130\n",
      "11133\n",
      "11151\n",
      "11152\n",
      "11153\n",
      "11161\n",
      "11162\n",
      "11178\n",
      "11182\n",
      "11185\n",
      "11191\n",
      "11197\n",
      "11198\n",
      "11219\n",
      "11221\n",
      "11226\n",
      "11229\n",
      "11249\n",
      "11274\n",
      "11278\n",
      "11285\n",
      "11286\n",
      "11296\n",
      "11305\n",
      "11319\n",
      "11328\n",
      "11335\n",
      "11352\n",
      "11370\n",
      "11377\n",
      "11388\n",
      "11393\n",
      "11396\n",
      "11397\n",
      "11398\n",
      "11399\n",
      "11402\n",
      "11425\n",
      "11426\n",
      "11449\n",
      "11470\n",
      "11477\n",
      "11486\n",
      "11498\n",
      "11499\n",
      "11504\n",
      "11524\n",
      "11527\n",
      "11529\n",
      "11549\n",
      "11557\n",
      "11565\n",
      "11569\n",
      "11576\n",
      "11580\n",
      "11593\n",
      "11596\n",
      "11601\n",
      "11602\n",
      "11606\n",
      "11655\n",
      "11664\n",
      "11665\n",
      "11672\n",
      "11681\n",
      "11684\n",
      "11696\n",
      "11707\n",
      "11708\n",
      "11736\n",
      "11743\n",
      "11766\n",
      "11769\n",
      "11798\n",
      "11803\n",
      "11807\n",
      "11824\n",
      "11833\n",
      "11835\n",
      "11852\n",
      "11859\n",
      "11871\n",
      "11875\n",
      "11876\n",
      "11885\n",
      "11904\n",
      "11910\n",
      "11951\n",
      "11957\n",
      "11964\n",
      "11966\n",
      "11968\n",
      "11969\n",
      "11977\n",
      "11979\n",
      "12012\n",
      "12020\n",
      "12024\n",
      "12027\n",
      "12028\n",
      "12035\n",
      "12040\n",
      "12048\n",
      "12084\n",
      "12093\n",
      "12099\n",
      "12105\n",
      "12128\n",
      "12159\n",
      "12163\n",
      "12172\n",
      "12175\n",
      "12182\n",
      "12183\n",
      "12188\n",
      "12193\n",
      "12204\n",
      "12213\n",
      "12224\n",
      "12226\n",
      "12234\n",
      "12236\n",
      "12241\n",
      "12251\n",
      "12252\n",
      "12300\n",
      "12316\n",
      "12317\n",
      "12334\n",
      "12346\n",
      "12360\n",
      "12363\n",
      "12365\n",
      "12366\n",
      "12371\n",
      "12373\n",
      "12379\n",
      "12381\n",
      "12387\n",
      "12405\n",
      "12406\n",
      "12417\n",
      "12422\n",
      "12425\n",
      "12429\n",
      "12437\n",
      "12438\n",
      "12451\n",
      "12453\n",
      "12459\n",
      "12467\n",
      "12469\n",
      "12490\n",
      "12492\n",
      "12494\n",
      "12522\n",
      "12523\n",
      "12532\n",
      "12533\n",
      "12551\n",
      "12558\n",
      "12563\n",
      "12571\n",
      "12576\n",
      "12584\n",
      "12590\n",
      "12592\n",
      "12608\n",
      "12612\n",
      "12626\n",
      "12630\n",
      "12641\n",
      "12648\n",
      "12653\n",
      "12657\n",
      "12672\n",
      "12698\n",
      "12705\n",
      "12706\n",
      "12720\n",
      "12744\n",
      "12761\n",
      "12766\n",
      "12767\n",
      "12771\n",
      "12777\n",
      "12786\n",
      "12798\n",
      "12807\n",
      "12829\n",
      "12845\n",
      "12863\n",
      "12865\n",
      "12877\n",
      "12878\n",
      "12885\n",
      "12887\n",
      "12894\n",
      "12904\n",
      "12916\n",
      "12942\n",
      "12956\n",
      "12961\n",
      "12974\n",
      "12975\n",
      "12977\n",
      "12984\n",
      "12991\n",
      "12993\n",
      "12996\n",
      "12997\n",
      "12999\n",
      "13000\n",
      "13006\n",
      "13031\n",
      "13045\n",
      "13051\n",
      "13072\n",
      "13111\n",
      "13114\n",
      "13116\n",
      "13123\n",
      "13131\n",
      "13135\n",
      "13138\n",
      "13142\n",
      "13143\n",
      "13160\n",
      "13178\n",
      "13187\n",
      "13188\n",
      "13202\n",
      "13203\n",
      "13211\n",
      "13213\n",
      "13217\n",
      "13230\n",
      "13240\n",
      "13268\n",
      "13272\n",
      "13285\n",
      "13293\n",
      "13298\n",
      "13300\n",
      "13304\n",
      "13315\n",
      "13317\n",
      "13320\n",
      "13326\n",
      "13328\n",
      "13332\n",
      "13338\n",
      "13340\n",
      "13345\n",
      "13358\n",
      "13363\n",
      "13365\n",
      "13367\n",
      "13383\n",
      "13386\n",
      "13393\n",
      "13394\n",
      "13400\n",
      "13414\n",
      "13418\n",
      "13419\n",
      "13420\n",
      "13424\n",
      "13426\n",
      "13434\n",
      "13496\n",
      "13500\n",
      "13532\n",
      "13534\n",
      "13536\n",
      "13542\n",
      "13548\n",
      "13551\n",
      "13553\n",
      "13555\n",
      "13561\n",
      "13571\n",
      "13574\n",
      "13579\n",
      "13588\n",
      "13590\n",
      "13598\n",
      "13607\n",
      "13626\n",
      "13627\n",
      "13634\n",
      "13636\n",
      "13645\n",
      "13673\n",
      "13679\n",
      "13684\n",
      "13692\n",
      "13716\n",
      "13723\n",
      "13730\n",
      "13746\n",
      "13750\n",
      "13755\n",
      "13762\n",
      "13764\n",
      "13790\n",
      "13801\n",
      "13809\n",
      "13815\n",
      "13817\n",
      "13824\n",
      "13826\n",
      "13828\n",
      "13829\n",
      "13830\n",
      "13841\n",
      "13845\n",
      "13852\n",
      "13854\n",
      "13859\n",
      "13869\n",
      "13872\n",
      "13875\n",
      "13877\n",
      "13880\n",
      "13882\n",
      "13884\n",
      "13888\n",
      "13892\n",
      "13899\n",
      "13905\n",
      "13906\n",
      "13914\n",
      "13915\n",
      "13917\n",
      "13920\n",
      "13925\n",
      "13933\n",
      "13935\n",
      "13941\n",
      "13950\n",
      "13951\n",
      "13953\n",
      "13981\n",
      "13983\n",
      "13995\n",
      "13996\n",
      "13997\n",
      "13998\n",
      "13999\n",
      "14000\n",
      "14001\n",
      "14003\n",
      "14004\n",
      "14013\n",
      "14031\n",
      "14039\n",
      "14046\n",
      "14051\n",
      "14058\n",
      "14073\n",
      "14074\n",
      "14076\n",
      "14086\n",
      "14089\n",
      "14102\n",
      "14104\n",
      "14105\n",
      "14117\n",
      "14123\n",
      "14132\n",
      "14140\n",
      "14152\n",
      "14159\n",
      "14162\n",
      "14163\n",
      "14164\n",
      "14178\n",
      "14196\n",
      "14199\n",
      "14200\n",
      "14216\n",
      "14220\n",
      "14221\n",
      "14227\n",
      "14241\n",
      "14246\n",
      "14252\n",
      "14260\n",
      "14266\n",
      "14270\n",
      "14277\n",
      "14289\n",
      "14312\n",
      "14340\n",
      "14344\n",
      "14353\n",
      "14357\n",
      "14360\n",
      "14370\n",
      "14377\n",
      "14386\n",
      "14396\n",
      "14405\n",
      "14406\n",
      "14408\n",
      "14417\n",
      "14420\n",
      "14450\n",
      "14452\n",
      "14461\n",
      "14484\n",
      "14485\n",
      "14499\n",
      "14501\n",
      "14503\n",
      "14505\n",
      "14516\n",
      "14526\n",
      "14545\n",
      "14549\n",
      "14556\n",
      "14557\n",
      "14601\n",
      "14608\n",
      "14613\n",
      "14618\n",
      "14640\n",
      "14653\n",
      "14661\n",
      "14680\n",
      "14686\n",
      "14690\n",
      "14695\n",
      "14702\n",
      "14708\n",
      "14725\n",
      "14726\n",
      "14731\n",
      "14751\n",
      "14755\n",
      "14766\n",
      "14771\n",
      "14782\n",
      "14803\n",
      "14806\n",
      "14815\n",
      "14826\n",
      "14828\n",
      "14829\n",
      "14842\n",
      "14843\n",
      "14846\n",
      "14849\n",
      "14871\n",
      "14876\n",
      "14880\n",
      "14883\n",
      "14885\n",
      "14891\n",
      "14893\n",
      "14898\n",
      "14899\n",
      "14906\n",
      "14907\n",
      "14908\n",
      "14917\n",
      "14925\n",
      "14965\n",
      "14968\n",
      "14977\n",
      "14982\n",
      "14988\n",
      "14994\n",
      "14995\n",
      "14999\n",
      "15001\n",
      "15011\n",
      "15034\n",
      "15039\n",
      "15040\n",
      "15042\n",
      "15055\n",
      "15056\n",
      "15057\n",
      "15059\n",
      "15064\n",
      "15068\n",
      "15072\n",
      "15100\n",
      "15108\n",
      "15115\n",
      "15134\n",
      "15136\n",
      "15139\n",
      "15150\n",
      "15161\n",
      "15167\n",
      "15168\n",
      "15173\n",
      "15183\n",
      "15185\n",
      "15190\n",
      "15214\n",
      "15230\n",
      "15248\n",
      "15267\n",
      "15287\n",
      "15291\n",
      "15293\n",
      "15304\n",
      "15310\n",
      "15316\n",
      "15322\n",
      "15334\n",
      "15342\n",
      "15346\n",
      "15347\n",
      "15364\n",
      "15375\n",
      "15377\n",
      "15379\n",
      "15380\n",
      "15400\n",
      "15401\n",
      "15406\n",
      "15408\n",
      "15413\n",
      "15415\n",
      "15438\n",
      "15474\n",
      "15479\n",
      "15482\n",
      "15489\n",
      "15498\n",
      "15503\n",
      "15512\n",
      "15518\n",
      "15525\n",
      "15529\n",
      "15543\n",
      "15549\n",
      "15560\n",
      "15573\n",
      "15576\n",
      "15581\n",
      "15582\n",
      "15590\n",
      "15592\n",
      "15603\n",
      "15610\n",
      "15621\n",
      "15642\n",
      "15655\n",
      "15666\n",
      "15669\n",
      "15679\n",
      "15683\n",
      "15689\n",
      "15697\n",
      "15700\n",
      "15723\n",
      "15728\n",
      "15736\n",
      "15737\n",
      "15748\n",
      "15752\n",
      "15754\n",
      "15766\n",
      "15769\n",
      "15783\n",
      "15806\n",
      "15829\n",
      "15833\n",
      "15858\n",
      "15867\n",
      "15869\n",
      "15879\n",
      "15883\n",
      "15892\n",
      "15895\n",
      "15897\n",
      "15906\n",
      "15912\n",
      "15930\n",
      "15936\n",
      "15945\n",
      "15946\n",
      "15971\n",
      "15987\n",
      "15996\n",
      "15999\n",
      "16000\n",
      "16003\n",
      "16007\n",
      "16020\n",
      "16039\n",
      "16040\n",
      "16054\n",
      "16065\n",
      "16076\n",
      "16084\n",
      "16086\n",
      "16090\n",
      "16097\n",
      "16106\n",
      "16111\n",
      "16113\n",
      "16118\n",
      "16121\n",
      "16122\n",
      "16125\n",
      "16130\n",
      "16138\n",
      "16142\n",
      "16146\n",
      "16154\n",
      "16158\n",
      "16161\n",
      "16164\n",
      "16169\n",
      "16179\n",
      "16180\n",
      "16183\n",
      "16187\n",
      "16198\n",
      "16203\n",
      "16207\n",
      "16264\n",
      "16266\n",
      "16270\n",
      "16273\n",
      "16283\n",
      "16285\n",
      "16287\n",
      "16300\n",
      "16318\n",
      "16319\n",
      "16323\n",
      "16344\n",
      "16352\n",
      "16371\n",
      "16380\n",
      "16388\n",
      "16397\n",
      "16399\n",
      "16401\n",
      "16408\n",
      "16409\n",
      "16412\n",
      "16420\n",
      "16442\n",
      "16444\n",
      "16445\n",
      "16451\n",
      "16453\n",
      "16472\n",
      "16475\n",
      "16481\n",
      "16485\n",
      "16486\n",
      "16492\n",
      "16496\n",
      "16498\n",
      "16502\n",
      "16508\n",
      "16514\n",
      "16515\n",
      "16516\n",
      "16517\n",
      "16528\n",
      "16541\n",
      "16550\n",
      "16553\n",
      "16564\n",
      "16566\n",
      "16572\n",
      "16579\n",
      "16582\n",
      "16583\n",
      "16587\n",
      "16604\n",
      "16612\n",
      "16614\n",
      "16633\n",
      "16640\n",
      "16651\n",
      "16657\n",
      "16661\n",
      "16677\n",
      "16681\n",
      "16686\n",
      "16719\n",
      "16720\n",
      "16759\n",
      "16774\n",
      "16775\n",
      "16783\n",
      "16787\n",
      "16811\n",
      "16815\n",
      "16819\n",
      "16834\n",
      "16846\n",
      "16847\n",
      "16848\n",
      "16857\n",
      "16861\n",
      "16881\n",
      "16892\n",
      "16896\n",
      "16909\n",
      "16913\n",
      "16921\n",
      "16928\n",
      "16942\n",
      "16948\n",
      "16961\n",
      "16972\n",
      "16974\n",
      "16981\n",
      "16982\n",
      "16987\n",
      "17006\n",
      "17011\n",
      "17019\n",
      "17023\n",
      "17049\n",
      "17051\n",
      "17053\n",
      "17058\n",
      "17071\n",
      "17072\n",
      "17077\n",
      "17084\n",
      "17090\n",
      "17098\n",
      "17099\n",
      "17101\n",
      "17121\n",
      "17131\n",
      "17161\n",
      "17169\n",
      "17171\n",
      "17175\n",
      "17178\n",
      "17184\n",
      "17185\n",
      "17189\n",
      "17199\n",
      "17202\n",
      "17208\n",
      "17223\n",
      "17285\n",
      "17286\n",
      "17287\n",
      "17299\n",
      "17301\n",
      "17307\n",
      "17313\n",
      "17348\n",
      "17349\n",
      "17367\n",
      "17369\n",
      "17376\n",
      "17393\n",
      "17417\n",
      "17421\n",
      "17427\n",
      "17432\n",
      "17442\n",
      "17444\n",
      "17456\n",
      "17459\n",
      "17472\n",
      "17474\n",
      "17480\n",
      "17487\n",
      "17489\n",
      "17499\n",
      "17502\n",
      "17513\n",
      "17525\n",
      "17529\n",
      "17534\n",
      "17535\n",
      "17537\n",
      "17538\n",
      "17543\n",
      "17550\n",
      "17556\n",
      "17573\n",
      "17577\n",
      "17585\n",
      "17590\n",
      "17603\n",
      "17604\n",
      "17617\n",
      "17622\n",
      "17633\n",
      "17637\n",
      "17641\n",
      "17648\n",
      "17664\n",
      "17668\n",
      "17675\n",
      "17678\n",
      "17691\n",
      "17702\n",
      "17712\n",
      "17724\n",
      "17725\n",
      "17733\n",
      "17742\n",
      "17760\n",
      "17762\n",
      "17764\n",
      "17781\n",
      "17784\n",
      "17785\n",
      "17787\n",
      "17789\n",
      "17790\n",
      "17804\n",
      "17821\n",
      "17825\n",
      "17870\n",
      "17876\n",
      "17882\n",
      "17896\n",
      "17899\n",
      "17910\n",
      "17914\n",
      "17919\n",
      "17921\n",
      "17945\n",
      "17949\n",
      "17954\n",
      "17957\n",
      "17969\n",
      "17975\n",
      "17978\n",
      "17986\n",
      "17993\n",
      "17997\n",
      "18001\n",
      "18008\n",
      "18013\n",
      "18023\n",
      "18028\n",
      "18036\n",
      "18052\n",
      "18054\n",
      "18066\n",
      "18071\n",
      "18072\n",
      "18076\n",
      "18079\n",
      "18082\n",
      "18083\n",
      "18090\n",
      "18094\n",
      "18104\n",
      "18111\n",
      "18113\n",
      "18116\n",
      "18117\n",
      "18124\n",
      "18136\n",
      "18139\n",
      "18143\n",
      "18151\n",
      "18153\n",
      "18166\n",
      "18196\n",
      "18202\n",
      "18237\n",
      "18244\n",
      "18245\n",
      "18265\n",
      "18267\n",
      "18268\n",
      "18276\n",
      "18279\n",
      "18288\n",
      "18309\n",
      "18328\n",
      "18334\n",
      "18351\n",
      "18353\n",
      "18359\n",
      "18360\n",
      "18367\n",
      "18372\n",
      "18373\n",
      "18375\n",
      "18380\n",
      "18381\n",
      "18387\n",
      "18399\n",
      "18400\n",
      "18408\n",
      "18413\n",
      "18419\n",
      "18420\n",
      "18426\n",
      "18438\n",
      "18459\n",
      "18478\n",
      "18500\n",
      "18513\n",
      "18516\n",
      "18520\n",
      "18522\n",
      "18528\n",
      "18529\n",
      "18535\n",
      "18536\n",
      "18545\n",
      "18557\n",
      "18560\n",
      "18590\n",
      "18611\n",
      "18641\n",
      "18647\n",
      "18666\n",
      "18667\n",
      "18671\n",
      "18678\n",
      "18684\n",
      "18689\n",
      "18690\n",
      "18700\n",
      "18702\n",
      "18703\n",
      "18706\n",
      "18716\n",
      "18724\n",
      "18734\n",
      "18737\n",
      "18742\n",
      "18764\n",
      "18767\n",
      "18774\n",
      "18777\n",
      "18780\n",
      "18791\n",
      "18804\n",
      "18809\n",
      "18816\n",
      "18827\n",
      "18844\n",
      "18845\n",
      "18847\n",
      "18851\n",
      "18855\n",
      "18857\n",
      "18863\n",
      "18871\n",
      "18875\n",
      "18876\n",
      "18894\n",
      "18896\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18905\n",
      "18913\n",
      "18918\n",
      "18919\n",
      "18922\n",
      "18929\n",
      "18935\n",
      "18939\n",
      "18941\n",
      "18952\n",
      "18953\n",
      "18965\n",
      "18969\n",
      "18977\n",
      "18991\n",
      "18998\n",
      "19019\n",
      "19020\n",
      "19032\n",
      "19037\n",
      "19038\n",
      "19041\n",
      "19055\n",
      "19060\n",
      "19076\n",
      "19079\n",
      "19081\n",
      "19106\n",
      "19108\n",
      "19115\n",
      "19120\n",
      "19123\n",
      "19139\n",
      "19140\n",
      "19142\n",
      "19153\n",
      "19159\n",
      "19167\n",
      "19190\n",
      "19191\n",
      "19194\n",
      "19205\n",
      "19212\n",
      "19234\n",
      "19235\n",
      "19238\n",
      "19244\n",
      "19255\n",
      "19262\n",
      "19264\n",
      "19267\n",
      "19272\n",
      "19274\n",
      "19278\n",
      "19281\n",
      "19307\n",
      "19348\n",
      "19349\n",
      "19353\n",
      "19356\n",
      "19367\n",
      "19372\n",
      "19376\n",
      "19378\n",
      "19394\n",
      "19398\n",
      "19399\n",
      "19407\n",
      "19418\n",
      "19423\n",
      "19435\n",
      "19446\n",
      "19448\n",
      "19449\n",
      "19457\n",
      "19462\n",
      "19470\n",
      "19472\n",
      "19476\n",
      "19482\n",
      "19512\n",
      "19513\n",
      "19518\n",
      "19520\n",
      "19521\n",
      "19530\n",
      "19545\n",
      "19552\n",
      "19554\n",
      "19555\n",
      "19570\n",
      "19571\n",
      "19575\n",
      "19598\n",
      "19605\n",
      "19625\n",
      "19631\n",
      "19656\n",
      "19659\n",
      "19663\n",
      "19665\n",
      "19681\n",
      "19685\n",
      "19710\n",
      "19713\n",
      "19726\n",
      "19746\n",
      "19748\n",
      "19752\n",
      "19754\n",
      "19760\n",
      "19765\n",
      "19782\n",
      "19783\n",
      "19786\n",
      "19787\n",
      "19791\n",
      "19813\n",
      "19819\n",
      "19822\n",
      "19833\n",
      "19835\n",
      "19836\n",
      "19839\n",
      "19852\n",
      "19863\n",
      "19890\n",
      "19891\n",
      "19893\n",
      "19903\n",
      "19904\n",
      "19911\n",
      "19914\n",
      "19916\n",
      "19917\n",
      "19934\n",
      "19938\n",
      "19940\n",
      "19958\n",
      "19960\n",
      "19983\n",
      "19990\n",
      "19995\n",
      "20000\n",
      "20032\n",
      "20054\n",
      "20065\n",
      "20082\n",
      "20084\n",
      "20088\n",
      "20092\n",
      "20103\n",
      "20107\n",
      "20123\n",
      "20133\n",
      "20171\n",
      "20188\n",
      "20191\n",
      "20195\n",
      "20203\n",
      "20210\n",
      "20223\n",
      "20244\n",
      "20245\n",
      "20248\n",
      "20260\n",
      "20262\n",
      "20269\n",
      "20271\n",
      "20274\n",
      "20280\n",
      "20286\n",
      "20289\n",
      "20299\n",
      "20307\n",
      "20312\n",
      "20325\n",
      "20329\n",
      "20334\n",
      "20345\n",
      "20347\n",
      "20370\n",
      "20382\n",
      "20395\n",
      "20418\n",
      "20436\n",
      "20448\n",
      "20452\n",
      "20458\n",
      "20460\n",
      "20463\n",
      "20468\n",
      "20471\n",
      "20480\n",
      "20493\n",
      "20495\n",
      "20496\n",
      "20533\n",
      "20535\n",
      "20539\n",
      "20542\n",
      "20546\n",
      "20548\n",
      "20558\n",
      "20566\n",
      "20569\n",
      "20572\n",
      "20573\n",
      "20574\n",
      "20583\n",
      "20602\n",
      "20606\n",
      "20610\n",
      "20616\n",
      "20623\n",
      "20630\n",
      "20649\n",
      "20651\n",
      "20658\n",
      "20679\n",
      "20682\n",
      "20700\n",
      "20707\n",
      "20720\n",
      "20739\n",
      "20746\n",
      "20762\n",
      "20766\n",
      "20774\n",
      "20777\n",
      "20782\n",
      "20783\n",
      "20791\n",
      "20796\n",
      "20799\n",
      "20828\n",
      "20832\n",
      "20840\n",
      "20845\n",
      "20846\n",
      "20847\n",
      "20853\n",
      "20857\n",
      "20859\n",
      "20860\n",
      "20876\n",
      "20895\n",
      "20901\n",
      "20911\n",
      "20917\n",
      "20930\n",
      "20941\n",
      "20949\n",
      "20956\n",
      "20959\n",
      "20963\n",
      "20982\n",
      "20986\n",
      "20991\n",
      "20997\n",
      "21002\n",
      "21008\n",
      "21009\n",
      "21011\n",
      "21025\n",
      "21031\n",
      "21041\n",
      "21043\n",
      "21046\n",
      "21051\n",
      "21065\n",
      "21070\n",
      "21071\n",
      "21076\n",
      "21079\n",
      "21085\n",
      "21103\n",
      "21104\n",
      "21106\n",
      "21111\n",
      "21112\n",
      "21123\n",
      "21132\n",
      "21145\n",
      "21155\n",
      "21156\n",
      "21157\n",
      "21167\n",
      "21170\n",
      "21174\n",
      "21180\n",
      "21198\n",
      "21209\n",
      "21211\n",
      "21214\n",
      "21236\n",
      "21243\n",
      "21249\n",
      "21250\n",
      "21265\n",
      "21268\n",
      "21271\n",
      "21276\n",
      "21286\n",
      "21293\n",
      "21296\n",
      "21297\n",
      "21300\n",
      "21310\n",
      "21324\n",
      "21326\n",
      "21340\n",
      "21341\n",
      "21347\n",
      "21348\n",
      "21354\n",
      "21355\n",
      "21358\n",
      "21365\n",
      "21367\n",
      "21377\n",
      "21379\n",
      "21381\n",
      "21388\n",
      "21389\n",
      "21394\n",
      "21397\n",
      "21402\n",
      "21412\n",
      "21419\n",
      "21425\n",
      "21435\n",
      "21448\n",
      "21456\n",
      "21460\n",
      "21479\n",
      "21485\n",
      "21496\n",
      "21498\n",
      "21513\n",
      "21519\n",
      "21524\n",
      "21546\n",
      "21552\n",
      "21559\n",
      "21570\n",
      "21581\n",
      "21583\n",
      "21589\n",
      "21596\n",
      "21600\n",
      "21614\n",
      "21623\n",
      "21632\n",
      "21654\n",
      "21660\n",
      "21673\n",
      "21674\n",
      "21695\n",
      "21710\n",
      "21712\n",
      "21729\n",
      "21732\n",
      "21796\n",
      "21798\n",
      "21805\n",
      "21807\n",
      "21808\n",
      "21827\n",
      "21837\n",
      "21854\n",
      "21908\n",
      "21913\n",
      "21927\n",
      "21932\n",
      "21939\n",
      "21946\n",
      "21954\n",
      "21956\n",
      "21958\n",
      "21970\n",
      "21972\n",
      "21999\n",
      "22002\n",
      "22005\n",
      "22012\n",
      "22013\n",
      "22017\n",
      "22024\n",
      "22036\n",
      "22054\n",
      "22064\n",
      "22066\n",
      "22067\n",
      "22079\n",
      "22086\n",
      "22092\n",
      "22101\n",
      "22108\n",
      "22116\n",
      "22118\n",
      "22126\n",
      "22140\n",
      "22142\n",
      "22155\n",
      "22158\n",
      "22163\n",
      "22165\n",
      "22166\n",
      "22169\n",
      "22170\n",
      "22193\n",
      "22200\n",
      "22201\n",
      "22203\n",
      "22204\n",
      "22206\n",
      "22235\n",
      "22239\n",
      "22247\n",
      "22250\n",
      "22267\n",
      "22279\n",
      "22286\n",
      "22290\n",
      "22305\n",
      "22325\n",
      "22336\n",
      "22341\n",
      "22353\n",
      "22356\n",
      "22357\n",
      "22361\n",
      "22365\n",
      "22382\n",
      "22383\n",
      "22401\n",
      "22408\n",
      "22414\n",
      "22436\n",
      "22455\n",
      "22466\n",
      "22473\n",
      "22485\n",
      "22486\n",
      "22488\n",
      "22498\n",
      "22503\n",
      "22507\n",
      "22512\n",
      "22516\n",
      "22520\n",
      "22542\n",
      "22561\n",
      "22571\n",
      "22576\n",
      "22586\n",
      "22589\n",
      "22591\n",
      "22598\n",
      "22602\n",
      "22606\n",
      "22608\n",
      "22610\n",
      "22611\n",
      "22625\n",
      "22627\n",
      "22635\n",
      "22649\n",
      "22657\n",
      "22658\n",
      "22663\n",
      "22666\n",
      "22673\n",
      "22693\n",
      "22695\n",
      "22705\n",
      "22706\n",
      "22717\n",
      "22719\n",
      "22730\n",
      "22739\n",
      "22744\n",
      "22746\n",
      "22751\n",
      "22761\n",
      "22769\n",
      "22786\n",
      "22806\n",
      "22843\n",
      "22845\n",
      "22854\n",
      "22873\n",
      "22887\n",
      "22893\n",
      "22903\n",
      "22945\n",
      "22955\n",
      "22959\n",
      "22969\n",
      "22974\n",
      "22979\n",
      "22981\n",
      "22983\n",
      "22996\n",
      "23002\n",
      "23008\n",
      "23012\n",
      "23017\n",
      "23026\n",
      "23038\n",
      "23040\n",
      "23042\n",
      "23044\n",
      "23058\n",
      "23064\n",
      "23084\n",
      "23087\n",
      "23115\n",
      "23120\n",
      "23121\n",
      "23123\n",
      "23126\n",
      "23129\n",
      "23147\n",
      "23153\n",
      "23158\n",
      "23179\n",
      "23182\n",
      "23183\n",
      "23193\n",
      "23196\n",
      "23198\n",
      "23210\n",
      "23218\n",
      "23226\n",
      "23231\n",
      "23236\n",
      "23239\n",
      "23245\n",
      "23254\n",
      "23255\n",
      "23270\n",
      "23280\n",
      "23292\n",
      "23300\n",
      "23309\n",
      "23321\n",
      "23337\n",
      "23351\n",
      "23358\n",
      "23365\n",
      "23380\n",
      "23381\n",
      "23388\n",
      "23390\n",
      "23393\n",
      "23417\n",
      "23420\n",
      "23441\n",
      "23442\n",
      "23446\n",
      "23452\n",
      "23456\n",
      "23457\n",
      "23468\n",
      "23469\n",
      "23472\n",
      "23486\n",
      "23490\n",
      "23501\n",
      "23505\n",
      "23514\n",
      "23515\n",
      "23521\n",
      "23523\n",
      "23545\n",
      "23561\n",
      "23565\n",
      "23567\n",
      "23573\n",
      "23586\n",
      "23592\n",
      "23596\n",
      "23604\n",
      "23628\n",
      "23631\n",
      "23633\n",
      "23641\n",
      "23644\n",
      "23645\n",
      "23647\n",
      "23654\n",
      "23655\n",
      "23657\n",
      "23675\n",
      "23676\n",
      "23682\n",
      "23706\n",
      "23709\n",
      "23711\n",
      "23736\n",
      "23737\n",
      "23742\n",
      "23743\n",
      "23752\n",
      "23759\n",
      "23766\n",
      "23767\n",
      "23773\n",
      "23795\n",
      "23814\n",
      "23818\n",
      "23819\n",
      "23841\n",
      "23842\n",
      "23847\n",
      "23848\n",
      "23854\n",
      "23856\n",
      "23867\n",
      "23869\n",
      "23876\n",
      "23881\n",
      "23890\n",
      "23893\n",
      "23900\n",
      "23906\n",
      "23907\n",
      "23926\n",
      "23931\n",
      "23936\n",
      "23940\n",
      "23943\n",
      "23944\n",
      "23947\n",
      "23960\n",
      "23965\n",
      "23966\n",
      "23970\n",
      "23973\n",
      "23979\n",
      "23997\n",
      "24001\n",
      "24020\n",
      "24043\n",
      "24048\n",
      "24056\n",
      "24057\n",
      "24068\n",
      "24073\n",
      "24077\n",
      "24083\n",
      "24098\n",
      "24124\n",
      "24125\n",
      "24132\n",
      "24138\n",
      "24141\n",
      "24148\n",
      "24155\n",
      "24156\n",
      "24157\n",
      "24162\n",
      "24174\n",
      "24179\n",
      "24198\n",
      "24204\n",
      "24205\n",
      "24207\n",
      "24209\n",
      "24211\n",
      "24213\n",
      "24214\n",
      "24219\n",
      "24221\n",
      "24227\n",
      "24248\n",
      "24253\n",
      "24259\n",
      "24269\n",
      "24278\n",
      "24282\n",
      "24283\n",
      "24284\n",
      "24287\n",
      "24290\n",
      "24308\n",
      "24316\n",
      "24328\n",
      "24351\n",
      "24357\n",
      "24370\n",
      "24372\n",
      "24405\n",
      "24413\n",
      "24428\n",
      "24430\n",
      "24444\n",
      "24453\n",
      "24456\n",
      "24466\n",
      "24474\n",
      "24477\n",
      "24488\n",
      "24496\n",
      "24512\n",
      "24513\n",
      "24516\n",
      "24518\n",
      "24519\n",
      "24526\n",
      "24535\n",
      "24536\n",
      "24538\n",
      "24543\n",
      "24544\n",
      "24547\n",
      "24551\n",
      "24564\n",
      "24568\n",
      "24571\n",
      "24577\n",
      "24578\n",
      "24586\n",
      "24599\n",
      "24603\n",
      "24605\n",
      "24628\n",
      "24632\n",
      "24647\n",
      "24648\n",
      "24650\n",
      "24658\n",
      "24659\n",
      "24662\n",
      "24671\n",
      "24676\n",
      "24677\n",
      "24678\n",
      "24688\n",
      "24702\n",
      "24708\n",
      "24710\n",
      "24745\n",
      "24749\n",
      "24754\n",
      "24764\n",
      "24766\n",
      "24767\n",
      "24774\n",
      "24782\n",
      "24785\n",
      "24787\n",
      "24804\n",
      "24818\n",
      "24825\n",
      "24827\n",
      "24852\n",
      "24854\n",
      "24860\n",
      "24874\n",
      "24877\n",
      "24884\n",
      "24901\n",
      "24903\n",
      "24924\n",
      "24942\n",
      "24956\n",
      "24959\n",
      "24963\n",
      "24966\n",
      "24972\n",
      "24978\n",
      "24980\n",
      "24982\n",
      "24984\n",
      "25005\n",
      "25021\n",
      "25044\n",
      "25047\n",
      "25049\n",
      "25050\n",
      "25057\n",
      "25067\n",
      "25068\n",
      "25075\n",
      "25088\n",
      "25090\n",
      "25094\n",
      "25099\n",
      "25110\n",
      "25114\n",
      "25126\n",
      "25130\n",
      "25141\n",
      "25168\n",
      "25172\n",
      "25173\n",
      "25176\n",
      "25179\n",
      "25184\n",
      "25216\n",
      "25219\n",
      "25222\n",
      "25227\n",
      "25228\n",
      "25230\n",
      "25236\n",
      "25237\n",
      "25247\n",
      "25257\n",
      "25264\n",
      "25280\n",
      "25292\n",
      "25304\n",
      "25310\n",
      "25314\n",
      "25327\n",
      "25344\n",
      "25346\n",
      "25349\n",
      "25360\n",
      "25373\n",
      "25399\n",
      "25411\n",
      "25414\n",
      "25420\n",
      "25426\n",
      "25437\n",
      "25441\n",
      "25456\n",
      "25466\n",
      "25469\n",
      "25473\n",
      "25478\n",
      "25480\n",
      "25482\n",
      "25485\n",
      "25489\n",
      "25490\n",
      "25498\n",
      "25508\n",
      "25509\n",
      "25510\n",
      "25529\n",
      "25534\n",
      "25536\n",
      "25542\n",
      "25562\n",
      "25571\n",
      "25577\n",
      "25589\n",
      "25603\n",
      "25605\n",
      "25606\n",
      "25612\n",
      "25614\n",
      "25621\n",
      "25624\n",
      "25626\n",
      "25630\n",
      "25631\n",
      "25652\n",
      "25660\n",
      "25666\n",
      "25672\n",
      "25681\n",
      "25696\n",
      "25712\n",
      "25713\n",
      "25715\n",
      "25723\n",
      "25726\n",
      "25729\n",
      "25759\n",
      "25791\n",
      "25794\n",
      "25795\n",
      "25798\n",
      "25823\n",
      "25825\n",
      "25834\n",
      "25841\n",
      "25845\n",
      "25851\n",
      "25855\n",
      "25864\n",
      "25881\n",
      "25883\n",
      "25891\n",
      "25903\n",
      "25907\n",
      "25917\n",
      "25941\n",
      "25955\n",
      "25969\n",
      "25986\n",
      "25996\n",
      "26000\n",
      "26016\n",
      "26019\n",
      "26026\n"
     ]
    }
   ],
   "source": [
    "#Output images that were misclassified by the singular classifier\n",
    "idx = 0\n",
    "for i in lenet.predict(testX):\n",
    "    if (np.argmax(i) != np.argmax(testY[idx])):\n",
    "        print(idx)\n",
    "    idx = idx + 1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
